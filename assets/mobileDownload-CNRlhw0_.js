import{o as p,F as f,D as b}from"./index-BIdBpajj.js";const E="imageToolsDB",c="processedImages",S=1,m=50*1024*1024,w=async()=>p(E,S,{upgrade(e){if(!e.objectStoreNames.contains(c)){const r=e.createObjectStore(c,{keyPath:"id",autoIncrement:!0});r.createIndex("timestamp","metadata.timestamp"),r.createIndex("fileName","metadata.fileName")}}}),h=async()=>{try{return(await(await w()).getAll(c)).reduce((s,t)=>{const n=new Blob([t.data]).size;return s+n},0)}catch(e){return console.error("Error calculating storage usage:",e),0}},y=async e=>{try{const s=(await w()).transaction(c,"readwrite"),t=s.objectStore(c),n=await t.index("timestamp").getAll();n.sort((a,i)=>new Date(a.metadata.timestamp)-new Date(i.metadata.timestamp));let o=0;for(const a of n){if(o>=e)break;const i=new Blob([a.data]).size;await t.delete(a.id),o+=i}return await s.done,o}catch(r){return console.error("Error cleaning up old entries:",r),0}},u=async(e,r)=>{try{const s=await w(),t=new Blob([e]).size,n=await h();if(n+t>m){const i=n+t-m;if(await y(i)<i)throw new Error("Storage quota exceeded. Please delete some images.")}const o=new Date().toISOString(),a={data:e,metadata:{...r,timestamp:o,processedOffline:!navigator.onLine,size:t,lastAccessed:o}};return await s.add(c,a),!0}catch(s){throw console.error("Error saving to IndexedDB:",s),s}},D=10*1024*1024,v=async(e,r,s={})=>{try{const n=await(await fetch(e)).blob();if(n.size>D)throw new Error("File size exceeds 10MB limit");const o=new FileReader,a=await new Promise(d=>{o.onloadend=()=>{const l=o.result.split(",")[1];d(l)},o.readAsDataURL(n)}),i=await f.writeFile({path:`Pictures/${r}`,data:a,directory:b.ExternalStorage,recursive:!0});return await u(a,{fileName:r,uri:i.uri,...s}),i.uri}catch(t){if(console.error("Error downloading file:",t),t.message==="File size exceeds 10MB limit")throw new Error("The file is too large. Please try a smaller file (max 10MB).");if(t.message.includes("Permission")){if(!navigator.onLine){const o=await(await fetch(e)).blob(),a=new FileReader,i=await new Promise(l=>{a.onloadend=()=>{const g=a.result.split(",")[1];l(g)},a.readAsDataURL(o)});if(await u(i,{fileName:r,...s,pendingDownload:!0}))return"Saved offline. Will download when permission is granted."}throw new Error("Storage permission denied. Please grant permission to save files.")}else throw new Error("Failed to save file. Please try again.")}};export{v as downloadFileOnMobile};
